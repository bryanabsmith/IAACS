<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mq="com.mapquest.tilemap.*" creationComplete="view1_creationCompleteHandler(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" title="Home" actionBarVisible="false">
	<fx:Script>
		<![CDATA[
			import com.mapquest.LatLng;
			import com.mapquest.services.directions.DirectionsEvent;
			import com.mapquest.services.directions.OpenDirections;
			import com.mapquest.services.directions.RibbonProperties;
			import com.mapquest.tilemap.pois.Poi;
			
			import flash.events.GeolocationEvent;
			import flash.sensors.Geolocation;
			
			import mx.events.FlexEvent;
			
			import spark.managers.PersistenceManager;
			
			import air.net.URLMonitor;
			
			[Embed(source="../res/program.png")] 
			[Bindable] 
			public var imgProgram:Class;
			
			[Bindable]
			private var titleFontSize:int;
			
			[Bindable]
			private var descFontSize:int;
			
			private var p:PersistenceManager = new PersistenceManager();
			
			private var resPOI:Poi;
			
			private var arrLocations:Array;
			private var dir:OpenDirections;
			private var ribbonProps:RibbonProperties;
			private var geo:Geolocation;
			
			private var lat:String;
			private var long:String;
			
			private var urlMonitor:URLMonitor;
			
			private var mapType:String = "pedestrian";
			
			private var dirURL:String = "http://open.mapquestapi.com/directions/v2/route?key=Fmjtd%7Cluur2gubn9%2Cb0%3Do5-9az5uf&ambiguities=ignore&from=43.657128,-79.410634&to=45,-79&callback=renderNarrative&outFormat=xml&unit=k&routeType=fastest";
			
			private var directionsTitle:String = "";
			private var transportMeansWalking:String = "";
			private var transportMeansDriving:String = "";
			private var transportLoading:String = "";
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				if (Capabilities.os.substring(0,2) == "iP") { // iPhone, iPad and iPod Touch padding at the top
					hGroupActionBarContents.paddingTop = 40;
					vGroupNoConnection.paddingTop = 40;
				} else {
					hGroupActionBarContents.paddingTop = 0;
				}
				labelActionBarTitle.text = "\u2190 " + data[2];
				
				//mqMap.setCenter(new LatLng(45.421867, -75.682159));
				
				var fontSize:String = p.getProperty("fontSize") as String;
				if (fontSize == null) {
					titleFontSize = 28;
					descFontSize = int(titleFontSize)-8;
				} else {
					titleFontSize = int(fontSize);
					descFontSize = int(titleFontSize)-8;
				}
				
				if (Geolocation.isSupported) { 
					geo = new Geolocation(); 
					if (!geo.muted) { 
						geo.addEventListener(GeolocationEvent.UPDATE, geoUpdateHandler); 
					} 
					geo.addEventListener(StatusEvent.STATUS, geoStatusHandler);
				} else { 
					labelActionBarCarWalk.visible = false;
					labelActionBarCarWalk.includeInLayout = false;
					mqMap.setCenter(new LatLng(45.421970, -75.682029)); // LMX
					lat = "45.421970";
					long = "-75.682029";
					dirURL = "http://open.mapquestapi.com/directions/v2/route?key=Fmjtd%7Cluur2gubn9%2Cb0%3Do5-9az5uf&ambiguities=ignore&from=" + lat + "," + long + "&to=" + data[0] + "," + data[1] + "&callback=renderNarrative&outFormat=xml&unit=k&routeType=" + mapType;
				}
				
				resPOI = new Poi(new LatLng(Number(data[0]), Number(data[1])));
				mqMap.addShape(resPOI);
				
				dir = new OpenDirections(mqMap.tileMap);
				ribbonProps = new RibbonProperties();
				ribbonProps.color = 0x801332;
				
				var languageURL:URLRequest;
				var selectedLanguage:String = p.getProperty("language") as String;
				if (selectedLanguage == "fr") {
					languageURL = new URLRequest("../res/translations/fr.xml");
				} else {
					languageURL = new URLRequest("../res/translations/en.xml");
				}
				
				var licenceLoader:URLLoader = new URLLoader();
				licenceLoader.addEventListener(Event.COMPLETE, displayText);
				licenceLoader.load(languageURL);
				
				function displayText(event:Event):void {
					var fileContents:XML = new XML(event.currentTarget.data);
					for (var item:String in fileContents.map) {
						labelActionBarOptions.text = fileContents.map.@optionsTitle[item];
						
						directionsTitle = fileContents.map.@directionsTitle[item];
						labelActionBarDir.text = directionsTitle;
						
						transportMeansWalking = fileContents.map.@walkingTitle[item];
						transportMeansDriving = fileContents.map.@drivingTitle[item];
						transportLoading = fileContents.map.@loadingTitle[item];
						
						labelActionBarCarWalk.text = transportMeansWalking;
					}
				}
				
				addDirHandlers();
			}
			
			// http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/sensors/Geolocation.html
			public function geoUpdateHandler(event:GeolocationEvent):void 
			{ 
				lat = event.latitude.toString();
				long = event.longitude.toString();
				mqMap.setCenter(new LatLng(Number(lat), Number(long)));
				mapType = "pedestrian"
				mapRoute("pedestrian");
				geo.removeEventListener(GeolocationEvent.UPDATE, geoUpdateHandler);
			}
			
			public function geoStatusHandler(event:StatusEvent):void 
			{ 
				if (geo.muted)
					geo.removeEventListener(GeolocationEvent.UPDATE, geoUpdateHandler);
				else
					geo.addEventListener(GeolocationEvent.UPDATE, geoStatusHandler);
			}
			
			private function addDirHandlers():void {
				
				dir.addEventListener(DirectionsEvent.DIRECTIONS_SUCCESS, routeSuccess);
				dir.addEventListener(DirectionsEvent.DIRECTIONS_ERROR, routeError);
				dir.addEventListener(DirectionsEvent.DIRECTIONS_AMBIGUITY, routeAmbiguity);
				dir.addEventListener(DirectionsEvent.DIRECTIONS_IOERROR, routeIOError);
				
				if (dir.configured) {
					directionsReady(null);
				}
				else {
					//event listener to handle ready state of directions object 
					dir.addEventListener(DirectionsEvent.DIRECTIONS_READY, directionsReady);
				}
			}
			
			private function routeSuccess(e:DirectionsEvent):void {
				trace("Route successful");
			}
			
			private function routeError(e:DirectionsEvent):void {
				trace("Route error");
			}
			
			private function routeAmbiguity(e:DirectionsEvent):void {
				trace("Route ambiguity");
			}
			
			private function routeIOError(e:DirectionsEvent):void {
				trace("Route I/O error");
			}
			
			private function directionsReady(e:DirectionsEvent):void {
				trace("Directions ready");
				mapRoute("pedestrian");
			}
			
			private function mapRoute(type:String):void {
				mapType = type;
				dir.locations = null;
				dir.options.routeType = type;
				
				arrLocations = new Array();
				arrLocations.push(String(lat) + ", " + String(long));
				//arrLocations.push(String("45.421970, -75.682029")); // LMX
				arrLocations.push(String(data[0] + ", " + data[1])); //Hotel
				//trace(arrLocations);
				
				dir.locations = arrLocations;
				dir.ribbonProperties = ribbonProps;
				dir.route();
				
				// http://open.mapquestapi.com/directions/v2/route?key=Fmjtd%7Cluur2gubn9%2Cb0%3Do5-9az5uf&ambiguities=ignore&from=43.657128,-79.410634&to=45,-79&callback=renderNarrative&outFormat=xml&unit=k
			}
			
			private function onStatusEvent(event:StatusEvent):void
			{
				var evt:StatusEvent = event;
				if (evt.code == "Service.available") {
					mainScroller.enabled = true;
					
					var myLoader:URLLoader = new URLLoader();
					myLoader.addEventListener(Event.COMPLETE, showDirectionsList);
					dirURL = "http://open.mapquestapi.com/directions/v2/route?key=Fmjtd%7Cluur2gubn9%2Cb0%3Do5-9az5uf&ambiguities=ignore&from=" + lat + "," + long + "&to=" + data[0] + "," + data[1] + "&callback=renderNarrative&outFormat=xml&unit=k&routeType=" + mapType;
					myLoader.load(new URLRequest(dirURL));
					//trace("http://open.mapquestapi.com/directions/v2/route?key=Fmjtd%7Cluur2gubn9%2Cb0%3Do5-9az5uf&ambiguities=ignore&from=43.657128,%20-79.410634&to=45,-79&callback=renderNarrative&outFormat=xml&unit=k");
				} else {
					mainScroller.enabled = false;
				}
			}
			
			protected function showDirectionsList(event:Event):void
			{
				var fileContents:XML = new XML(event.currentTarget.data);
				var count:int = 1;
				var tempDir:String = "";
				
				for (var item:String in fileContents.route.legs.leg.maneuvers.maneuver) {
					tempDir += String(count) + ". " + fileContents.route.legs.leg.maneuvers.maneuver.narrative[item].replace("  ", " ") + " (" + String(int((fileContents.route.legs.leg.maneuvers.maneuver.distance[item])*100)/100) + " km)\n\n";
					count++;
				}
				
				if (tempDir == "") {
					tempDir = "Directions not available for this route and method of transportation.";
				}
				
				labelViewDir.text = "\u2190 " + directionsTitle;
				labelDirections.text = tempDir;
				groupViewDir.visible = true;
				groupViewDir.includeInLayout = true;
				
				labelActionBarDir.text = directionsTitle;
				labelActionBarDir.enabled = true;
			}
			
			protected function labelActionBarCarWalk_clickHandler(event:MouseEvent):void
			{
				if (labelActionBarCarWalk.text == transportMeansWalking) {
					mapType = "fastest";
					mapRoute('Fastest');
					labelActionBarCarWalk.text = transportMeansDriving;
				} else {
					mapType = "pedestrian";
					mapRoute('Pedestrian');
					labelActionBarCarWalk.text = transportMeansWalking;
				}
			}
			
			protected function labelActionBarDir_clickHandler(event:MouseEvent):void
			{
				
				labelActionBarDir.text = transportLoading;
				labelActionBarDir.enabled = false;
				
				var urlRequest:URLRequest = new URLRequest("http://open.mapquestapi.com");
				urlMonitor = new URLMonitor(urlRequest);
				urlMonitor.addEventListener(StatusEvent.STATUS, onStatusEvent);
				urlMonitor.start();
			}
			
			protected function labelActionBarOptions_clickHandler(event:MouseEvent):void
			{
				if (groupActionBarBottomTitle.visible == true) {
					groupActionBarBottomTitle.visible = false;
					groupActionBarBottomTitle.includeInLayout = false;
				} else {
					groupActionBarBottomTitle.visible = true;
					groupActionBarBottomTitle.includeInLayout = true;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:SlideViewTransition id="slideTransition" duration="300" direction="up" transitionControlsWithContent="false"/>
	</fx:Declarations>
	
	<s:VGroup id="vGroupMain" height="100%" width="100%" gap="0"> 
		<s:Group id="groupActionBarTitle" width="100%">
			<s:Rect width="100%" height="100%">
				<s:fill><s:SolidColor id="backgroundActionBarTitle" color="#801332"/></s:fill>
			</s:Rect>
			<s:HGroup id="hGroupActionBarContents" width="100%" verticalAlign="middle" height="100%" paddingLeft="10" paddingRight="10">
				<s:Label id="labelActionBarTitle" width="100%" maxDisplayedLines="1" lineBreak="toFit" text="" color="#FFFFFF" styleName="title" paddingTop="20" paddingBottom="20" click="navigator.popView();"/>
				<s:Spacer width="100%"/>
				<s:Label id="labelActionBarOptions" maxDisplayedLines="-1" lineBreak="toFit" text="Options" color="#FFFFFF" styleName="title" paddingTop="20" paddingBottom="20" paddingRight="10" click="labelActionBarOptions_clickHandler(event)"/>
			</s:HGroup>
		</s:Group>
		
		<!-- http://help.adobe.com/en_US/flex/using/WS422719A4-7849-4921-AF39-57FF567B483B.html#WS063B0491-B7AB-4b00-A39F-E44310BCB0E0 -->
		<!--<s:SkinnableContainer id="backgroundContainer" height="100%" width="100%" skinClass="skins.BackPic">-->
		
		<s:VGroup id="vGroupBackground" width="100%" height="100%" gap="0">
			
			<s:Group id="groupBackground" width="100%" height="100%">
				
				<s:Rect width="100%" height="100%">
					<!--<s:stroke>
					<s:SolidColorStroke id="colourActionBarTitleBorder" color="#000000" weight="2" />
					</s:stroke>-->
					<s:fill><s:SolidColor id="backgroundBackground" color="#E8E8E8"/></s:fill>
				</s:Rect>
				
				<s:Scroller id="mainScroller" width="100%" height="100%">
					
					<s:VGroup id="vGroupContent" height="100%" width="100%" gap="0">
						
						<mq:TilemapComponent id="mqMap" x="0" y="0" key="Fmjtd%7Cluur2gubn9%2Cb0%3Do5-9az5uf" zoom="15" width="100%" height="100%"/>
						
					</s:VGroup>
					
				</s:Scroller>
				
				<s:Group id="groupActionBarBottomTitle" width="100%" visible="false" includeInLayout="false" depth="2">
					<s:Rect width="100%" height="100%">
						<s:fill><s:SolidColor id="backgroundActionBarBottomTitle" color="#801332" alpha="0.85"/></s:fill>
					</s:Rect>
					<s:HGroup id="hGroupActionBarBottomContents" width="100%" verticalAlign="middle" paddingLeft="10" paddingRight="10">
						<s:Label id="labelActionBarDir" width="100%" lineBreak="toFit" text="Directions" color="#FFFFFF" styleName="title" paddingTop="20" paddingBottom="20" paddingRight="10" textAlign="center" click="labelActionBarDir_clickHandler(event)"/>
						<s:Line height="90%">
							<s:stroke>
								<s:SolidColorStroke color="0xFFFFFF" weight="2"/>
							</s:stroke>
						</s:Line>
						<s:Label id="labelActionBarCarWalk" width="100%" lineBreak="toFit" text="Walking" color="#FFFFFF" styleName="title" paddingTop="20" paddingBottom="20" paddingRight="10" textAlign="center" click="labelActionBarCarWalk_clickHandler(event)"/>
					</s:HGroup>
				</s:Group>
				
			</s:Group>
			
		</s:VGroup>
		
		
		<!--</s:SkinnableContainer>-->		
	</s:VGroup>
	
	<s:VGroup width="100%" height="100%">
		<s:Group id="groupViewDir" width="100%" height="100%" visible="false" includeInLayout="false" depth="3">
			<!-- http://flexponential.com/2009/11/23/adding-a-background-color-to-a-spark-group/ --> 
			<s:Rect width="100%" height="100%">
				<s:fill><s:SolidColor color="#000000" alpha="0.85"/></s:fill>
			</s:Rect>
			<s:VGroup width="100%" height="100%">
				<s:HGroup id="hGroupDirTitle" width="100%" paddingRight="20" paddingLeft="20" paddingBottom="20" paddingTop="60">
					<s:Label id="labelViewDir" width="100%" styleName="title" text="&#8592; Directions" color="#E8E8E8" click="groupViewDir.visible = false; groupViewDir.includeInLayout = false;"/>
					<s:Spacer width="100%"/>
					<!--<s:BusyIndicator id="loadingDir" symbolColor="0xFFFFFF"/>-->
				</s:HGroup>
				<s:Scroller id="newsScroller" width="100%" height="100%">
					<s:VGroup paddingBottom="20" paddingLeft="20" paddingRight="20" width="100%" height="100%">
						<s:VGroup id="vGroupViewDir" width="100%" height="100%">
							<s:Label id="labelDirections" styleName="desc" color="#FFFFFF" width="100%"/>
						</s:VGroup>
						<s:Spacer id="spacerViewNewsDir" width="10" height="10"/>
					</s:VGroup>
				</s:Scroller>
			</s:VGroup>
		</s:Group>
	</s:VGroup>
	
	<s:VGroup width="100%" height="100%">
		<s:Group id="groupNetworkError" width="100%" visible="false" includeInLayout="false" depth="2">
			<!-- http://flexponential.com/2009/11/23/adding-a-background-color-to-a-spark-group/ --> 
			<s:Rect width="100%" height="100%">
				<s:fill><s:SolidColor color="#B80000" alpha="0.9"/></s:fill>
			</s:Rect>
			<s:VGroup id="vGroupNoConnection" paddingBottom="10" paddingLeft="10" paddingRight="10" width="100%">
				<s:Spacer id="spacerNetworkTop" width="10" height="10"/>
				<s:HGroup id="hGroupConnectionProblem" width="100%">
					<s:Label id="labelNetworkError" height="100%" width="100%" color="#FFFFFF"
							 text="No network connection." verticalAlign="middle" textAlign="center"/>
				</s:HGroup>
				<s:Spacer id="spacerNetworkBottom" width="10" height="10"/>
			</s:VGroup>
		</s:Group>
	</s:VGroup>
	
</s:View>
